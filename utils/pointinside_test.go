package utils

import (
	"strings"
	"testing"
)

func Test_p1(t *testing.T) {
	pointstr := "115.51862520,28.59237792;115.54313508,28.62951147;115.53637140,28.64835648;115.54063668,28.67072625;115.54722756,28.69057755;115.54329168,28.71432099;115.55094996,28.73116161;115.51783716,28.74240297;115.50680748,28.73530278;115.48769400,28.73738547;115.47168948,28.73265489;115.46016336,28.72668078;115.44824772,28.73766708;115.43628492,28.75909725;115.44283404,28.77387408;115.46209404,28.79518509;115.47860292,28.80931779;115.48326492,28.83297114;115.49084328,28.84453137;115.47362988,28.85345046;115.44988968,28.86003315;115.42785156,28.85647554;115.41059748,28.86171192;115.39440648,28.85618889;115.41092544,28.82301048;115.40484792,28.80251568;115.38334224,28.76914341;115.36702092,28.78378704;115.32795228,28.79524692;115.31520756,28.83353013;115.29677628,28.83339639;115.28502912,28.82686851;115.27349184,28.83658302;115.23068964,28.83863169;115.20825048,28.83571254;115.16475312,28.84679541;115.15175316,28.85880636;115.11686232,28.85108400;115.08296184,28.83775896;115.07068044,28.82392452;115.04154168,28.81143927;115.00043328,28.80123291;114.95639052,28.82139552;114.93285804,28.82558583;114.90843924,28.81890540;114.90822972,28.81882764;114.91095348,28.80461835;114.89834016,28.79010054;114.88794804,28.77145209;114.87566988,28.76362866;114.83600940,28.74525966;114.82428492,28.76011569;114.80913972,28.77262308;114.79386708,28.75903254;114.79658940,28.73118798;114.77053944,28.71791946;114.75485460,28.71207378;114.73963776,28.69725096;114.75211968,28.65918015;114.77650104,28.64330298;114.81637644,28.60754202;114.84124272,28.60555500;114.86787732,28.61570862;114.88100652,28.62840348;114.91113744,28.62643752;114.93353988,28.63519200;114.97307904,28.61403804;114.99760944,28.61610453;115.01673552,28.58749704;115.04583000,28.58456799;115.05815136,28.59954300;115.11312984,28.64036133;115.13431836,28.62810396;115.18517160,28.64071251;115.24366008,28.63037169;115.26460776,28.60149708;115.28576568,28.60008570;115.29821880,28.61173971;115.32272652,28.58050737;115.33771152,28.57001778;115.37816616,28.58855103;115.37178192,28.60213104;115.38936720,28.60623180;115.40988072,28.59674616;115.41348324,28.57152960;115.43028840,28.57036167;115.46710236,28.59475023;115.47841572,28.60582167;115.50538260,28.60774074;115.51862520,28.59237792;115.41650184,28.69827804;115.39676016,28.68665346;115.37598168,28.68657903;115.35643584,28.70602929;115.37749404,28.72044603;115.39252260,28.72058301;115.40743812,28.70745777;115.41650184,28.69827804;115.51862520,28.59237792;115.54313508,28.62951147;115.53637140,28.64835648;115.54063668,28.67072625;115.54722756,28.69057755;115.54329168,28.71432099;115.55094996,28.73116161;115.51783716,28.74240297;115.50680748,28.73530278;115.48769400,28.73738547;115.47168948,28.73265489;115.46016336,28.72668078;115.44824772,28.73766708;115.43628492,28.75909725;115.44283404,28.77387408;115.46209404,28.79518509;115.47860292,28.80931779;115.48326492,28.83297114;115.49084328,28.84453137;115.47362988,28.85345046;115.44988968,28.86003315;115.42785156,28.85647554;115.41059748,28.86171192;115.39440648,28.85618889;115.41092544,28.82301048;115.40484792,28.80251568;115.38334224,28.76914341;115.36702092,28.78378704;115.32795228,28.79524692;115.31520756,28.83353013;115.29677628,28.83339639;115.28502912,28.82686851;115.27349184,28.83658302;115.23068964,28.83863169;115.20825048,28.83571254;115.16475312,28.84679541;115.15175316,28.85880636;115.11686232,28.85108400;115.08296184,28.83775896;115.07068044,28.82392452;115.04154168,28.81143927;115.00043328,28.80123291;114.95639052,28.82139552;114.93285804,28.82558583;114.90843924,28.81890540;114.90822972,28.81882764;114.91095348,28.80461835;114.89834016,28.79010054;114.88794804,28.77145209;114.87566988,28.76362866;114.83600940,28.74525966;114.82428492,28.76011569;114.80913972,28.77262308;114.79386708,28.75903254;114.79658940,28.73118798;114.77053944,28.71791946;114.75485460,28.71207378;114.73963776,28.69725096;114.75211968,28.65918015;114.77650104,28.64330298;114.81637644,28.60754202;114.84124272,28.60555500;114.86787732,28.61570862;114.88100652,28.62840348;114.91113744,28.62643752;114.93353988,28.63519200;114.97307904,28.61403804;114.99760944,28.61610453;115.01673552,28.58749704;115.04583000,28.58456799;115.05815136,28.59954300;115.11312984,28.64036133;115.13431836,28.62810396;115.18517160,28.64071251;115.24366008,28.63037169;115.26460776,28.60149708;115.28576568,28.60008570;115.29821880,28.61173971;115.32272652,28.58050737;115.33771152,28.57001778;115.37816616,28.58855103;115.37178192,28.60213104;115.38936720,28.60623180;115.40988072,28.59674616;115.41348324,28.57152960;115.43028840,28.57036167;115.46710236,28.59475023;115.47841572,28.60582167;115.50538260,28.60774074;115.51862520,28.59237792;115.41650184,28.69827804;115.39676016,28.68665346;115.37598168,28.68657903;115.35643584,28.70602929;115.37749404,28.72044603;115.39252260,28.72058301;115.40743812,28.70745777;115.41650184,28.69827804"
	pss := strings.Split(pointstr, ";")
	lp := []*Point{}
	for _, ps := range pss {
		pp := strings.Split(ps, ",")
		lpp := &Point{
			X: AsFloat64(pp[0]),
			Y: AsFloat64(pp[1]),
		}
		lp = append(lp, lpp)
	}
	p := &Point{
		X: 115.51862510,
		Y: 28.62951147,
	}
	t.Log("test1:", PtInPolygon(p, lp))
	t.Log("test2:", is_inside(p, lp))
}
